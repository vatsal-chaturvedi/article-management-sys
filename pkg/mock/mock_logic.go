// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatsal-chaturvedi/article-management-sys/internal/logic (interfaces: ArticleManagementLogicI)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vatsal-chaturvedi/article-management-sys/internal/model"
)

// MockArticleManagementLogicI is a mock of ArticleManagementLogicI interface.
type MockArticleManagementLogicI struct {
	ctrl     *gomock.Controller
	recorder *MockArticleManagementLogicIMockRecorder
}

// MockArticleManagementLogicIMockRecorder is the mock recorder for MockArticleManagementLogicI.
type MockArticleManagementLogicIMockRecorder struct {
	mock *MockArticleManagementLogicI
}

// NewMockArticleManagementLogicI creates a new mock instance.
func NewMockArticleManagementLogicI(ctrl *gomock.Controller) *MockArticleManagementLogicI {
	mock := &MockArticleManagementLogicI{ctrl: ctrl}
	mock.recorder = &MockArticleManagementLogicIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleManagementLogicI) EXPECT() *MockArticleManagementLogicIMockRecorder {
	return m.recorder
}

// GetAllArticle mocks base method.
func (m *MockArticleManagementLogicI) GetAllArticle(arg0, arg1 int) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArticle", arg0, arg1)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// GetAllArticle indicates an expected call of GetAllArticle.
func (mr *MockArticleManagementLogicIMockRecorder) GetAllArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArticle", reflect.TypeOf((*MockArticleManagementLogicI)(nil).GetAllArticle), arg0, arg1)
}

// GetArticle mocks base method.
func (m *MockArticleManagementLogicI) GetArticle(arg0 string) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", arg0)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockArticleManagementLogicIMockRecorder) GetArticle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockArticleManagementLogicI)(nil).GetArticle), arg0)
}

// InsertArticle mocks base method.
func (m *MockArticleManagementLogicI) InsertArticle(arg0 *model.Article) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", arg0)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockArticleManagementLogicIMockRecorder) InsertArticle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockArticleManagementLogicI)(nil).InsertArticle), arg0)
}
